#!/usr/bin/env bash

set -eu
set -o pipefail
shopt -s inherit_errexit

readonly TESTDIR="/test"

function main() {
  local artifact version

  while [ "${#}" != 0 ]; do
    case "${1}" in
      --artifact)
        artifact="${2}"
        shift 2
        ;;

      --version)
        version="${2}"
        shift 2
        ;;

      "")
        shift
        ;;

      *)
        echo "unknown argument \"${1}\""
        exit 1
    esac
  done

  if [[ -z "${artifact:-}" ]]; then
    echo "--artifact is required"
    exit 1
  fi

  if [[ -z "${version:-}" ]]; then
    echo "--version is required"
    exit 1
  fi

  echo "Unpacking artifact..."
  tar zxf "${artifact}" --strip-components=2

  echo "Checking artifact structure..."

  if ! [ -f "${TESTDIR}/bin/bundler" ];
  then
    echo "missing bundler executable"
    ls -al "${TESTDIR}"
    exit 1
  fi

  if ! [ -f "${TESTDIR}/bin/bundle" ];
  then
    echo "missing bundle executable"
    ls -al "${TESTDIR}"
    exit 1
  fi

  # this is how the MRI buildpack sets the GEM_PATH; xargs just trims whitespace
  gem_path="$(gem env path | tr -d '[:space:]')"

  # add the bundler artifact path to the GEM_PATH (as in the bundler buildpack)
  export GEM_PATH="${TESTDIR}:${gem_path}"

  echo "Checking bundler version..."
  # the underscores-wrapped version forces bundler to use the requested
  # version, not the latest installed version
  local output
  output=$(${TESTDIR}/bin/bundler "_${version}_" version)
  check_version "${version}" "${output}"

  echo "Checking bundle version..."
  output=$(${TESTDIR}/bin/bundle "_${version}_" version)
  check_version "${version}" "${output}"

  # test installing a gem
  echo "Testing installing gems..."
  ${TESTDIR}/bin/bundle "_${version}_" install

  local green reset
  green="\033[0;32m"
  reset="\033[0;39m"

  echo "Installed gems."

  os="$(grep '^VERSION=' /etc/os-release)"
  echo -e "${green}Tests succeeded for ${artifact} on ${os}!${reset}" >&2
  exit 0
}

function check_version() {
  local expected output
  expected="${1}"
  output="${2}"

  if ! [[ ${output} =~ [0-9]+\.[0-9]+\.[0-9]+ ]]; then
    echo "No semver version in version command output"
    exit 1
  fi

  local actual
  # this extracts the semver version that matched the regex in the previous if
  # statment
  actual="${BASH_REMATCH[0]}"

  if [[ "${actual}" != "${expected}" ]]; then
    echo "bundler version ${actual} doesn't match expected ${expected}"
    exit 1
  fi
}

main "${@:-}"
